import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class TicTacToe extends Application {
    private static final int SIZE = 5;
    private char[][] board = new char[SIZE][SIZE];
    private boolean playerX = true;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        initializeBoard();

        GridPane gridPane = createBoard();
        setOnAction(gridPane);

        Scene scene = new Scene(gridPane, 300, 300);

        primaryStage.setTitle("Tic Tac Toe (5x5)");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private GridPane createBoard() {
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                Button button = new Button();
                button.setMinSize(60, 60);
                gridPane.add(button, col, row);
            }
        }

        return gridPane;
    }

    private void initializeBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = ' ';
            }
        }
    }

    private void setOnAction(GridPane gridPane) {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                Button button = (Button) gridPane.getChildren().get(row * SIZE + col);
                int finalRow = row;
                int finalCol = col;
                button.setOnAction(e -> handleButtonClick(finalRow, finalCol, button));
            }
        }
    }

    private void handleButtonClick(int row, int col, Button button) {
        if (board[row][col] == ' ' && !isGameFinished()) {
            if (playerX) {
                board[row][col] = 'X';
                button.setText("X");
            } else {
                board[row][col] = 'O';
                button.setText("O");
            }
            playerX = !playerX;

            if (isGameFinished()) {
                showResult();
            }
        }
    }

    private boolean isGameFinished() {
        return checkRows() || checkCols() || checkDiagonals();
    }

    private boolean checkRows() {
        for (int i = 0; i < SIZE; i++) {
            if (checkLine(board[i][0], board[i][1], board[i][2], board[i][3], board[i][4])) {
                return true;
            }
        }
        return false;
    }

    private boolean checkCols() {
        for (int i = 0; i < SIZE; i++) {
            if (checkLine(board[0][i], board[1][i], board[2][i], board[3][i], board[4][i])) {
                return true;
            }
        }
        return false;
    }

    private boolean checkDiagonals() {
        return checkLine(board[0][0], board[1][1], board[2][2], board[3][3], board[4][4]) ||
                checkLine(board[0][4], board[1][3], board[2][2], board[3][1], board[4][0]);
    }

    private boolean checkLine(char a, char b, char c, char d, char e) {
        return a != ' ' && a == b && b == c && c == d && d == e;
    }

    private void showResult() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Game Over");
        alert.setHeaderText(null);

        if (playerX) {
            alert.setContentText("Player O wins!");
        } else {
            alert.setContentText("Player X wins!");
        }

        alert.showAndWait();
    }
}
